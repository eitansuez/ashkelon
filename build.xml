<?xml version="1.0"?>

<project name="ashkelon" default="war">
   <description>open source java documentation management system</description>
   
   <property name="version" value="0.8.9" />
   <property environment="env" />

   <!-- currently, valid options are: mysql, postgres, mckoidb -->
   <property name="dbtype" value="postgres" />
   <property name="dbdir" location="db/${dbtype}" />

   <property name="srcdir" location="src" />
   <property name="builddir" location="build" />
   <property name="buildclassesdir" location="build/classes" />
   <property name="libdir" location="lib" />
   <property name="libtoolsdir" location="${libdir}/tools" />
   <property name="etcdir" location="etc" />
   <property name="distdir" location="dist" />

   <property name="test.dir" location="test" />
   <property name="test.src.dir" location="${test.dir}" />
   <property name="test.classes.dir" location="${buildclassesdir}" />
   <property name="test.lib.dir" location="lib/test" />
   <property name="test.reports.dir" location="${builddir}/reports" />

   <property name="webappsdir" location="${env.CATALINA_HOME}/webapps" />

   <path id="class.path">
      <pathelement location="${java.home}/lib/tools.jar" />
      <fileset dir="${libdir}" includes="*.jar" />
      <fileset dir="${dbdir}" includes="*.jar" />
      <pathelement location="${buildclassesdir}" />
   </path>

   <path id="test.classpath">
     <path refid="class.path" />
     <fileset dir="${test.lib.dir}" includes="**/*.jar" />
     <pathelement location="${test.classes.dir}" />
   </path>


   <target name="init">
      <mkdir dir="${buildclassesdir}" />
      <mkdir dir="${distdir}" />
      <available file="${webappsdir}" type="dir" property="webappsdir.present" />
      <tstamp />
   </target>
   
   <target name="clean" description="delete build artifacts">
      <delete dir="${builddir}" />
      <delete dir="${distdir}" />
   </target>

   <taskdef name="build-statements" classname="org.ashkelon.db.StatementsBuilder"
     classpath="lib/ashkelon-ant.jar" />

   <target name="compile" depends="init" description="compile">
      <javac debug="on" srcdir="${srcdir}" destdir="${buildclassesdir}" classpathref="class.path" />

      <copy todir="${buildclassesdir}">
        <fileset dir="${srcdir}" includes="org/**/*.xml,org/**/*.txt" />
      </copy>
      
      <copy todir="${buildclassesdir}">
        <fileset dir="${dbdir}" includes="org/**" />
      </copy>

      <build-statements dbtype="${dbtype}" 
         tofile="${buildclassesdir}/org/ashkelon/db/statements.properties" />

      <copy file="${etcdir}/web.xml" tofile="${builddir}/web.xml" filtering="true">
        <filterset>
          <filter token="SOURCEPATH" value="${env.SOURCEPATH}" />
        </filterset>
      </copy> 

      <copy tofile="${builddir}/jdbc-driver.jar">
        <fileset dir="${dbdir}" includes="*.jar" /> <!-- should be a single file -->
      </copy>
   </target>

   <!-- JiBX binding compiler task definition -->
   <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
     <classpath>
       <pathelement location="${libtoolsdir}/bcel.jar" />
       <pathelement location="${libtoolsdir}/jibx-bind.jar" />
       <pathelement location="${libdir}/jibx-run.jar" />
       <pathelement location="${libdir}/xpp3.jar" />
     </classpath>
   </taskdef>

   <!-- Run JiBX binding compiler -->
   <target name="bind" depends="compile" description="run JiBX binding compiler">
     <bind binding="${etcdir}/binding.xml">
       <classpathset dir="${buildclassesdir}" />
       <classpathset dir="${libdir}/jibx-run.jar" />
       <classpathset dir="${libdir}/castor.jar" />
     </bind>
   </target>


   <target name="jar" depends="bind" description="jar">
      <jar destfile="${builddir}/ashkelon.jar" basedir="${buildclassesdir}" 
        includes="org/ashkelon/**/*" />
   </target>

   <target name="war" depends="jar" description="war">
      <war destfile="${distdir}/ashkelon.war" webxml="${builddir}/web.xml" basedir="htdocs">
         <lib dir="${libdir}" excludes="servlet.jar" />
         <lib dir="${dbdir}" includes="*.jar" />
         <lib dir="${builddir}" includes="ashkelon.jar" />
         <webinf dir="${etcdir}/tld" includes="*.tld" />
      </war>
   </target>


  <!-- ======================== -->
  <!-- SECTION:  Tomcat Related

  <taskdef name="tomcat-reload" classname="org.apache.catalina.ant.ReloadTask" />
  <taskdef name="tomcat-install" classname="org.apache.catalina.ant.InstallTask" />
  <taskdef name="tomcat-remove" classname="org.apache.catalina.ant.RemoveTask" />
  <taskdef name="tomcat-start" classname="org.apache.catalina.ant.StartTask" />
  <taskdef name="tomcat-stop" classname="org.apache.catalina.ant.StopTask" />
  <taskdef name="tomcat-list" classname="org.apache.catalina.ant.ListTask" />

  <property name="tomcaturl" value="http://localhost:8080/manager" />
  <property name="tomcatusr" value="admin" />
  <property name="tomcatpwd" value="admin" />
  <property name="contextpath" value="/ashkelon" />

  <target name="install-war" depends="war" description="install war file to catalina">
    <tomcat-install url="${tomcaturl}" username="${tomcatusr}" password="${tomcatpwd}" path="${contextpath}" 
       war="file://${distdir}/ashkelon.war" />
  </target>

  <target name="reinstall-war" depends="war" description="reinstall war file to catalina">
    <tomcat-remove url="${tomcaturl}" username="${tomcatusr}" password="${tomcatpwd}" path="${contextpath}" />
    <tomcat-install url="${tomcaturl}" username="${tomcatusr}" password="${tomcatpwd}" path="${contextpath}" 
       war="file://${distdir}/ashkelon.war" />
  </target>

  <target name="listwebapps" description="list webapps deployed to tomcat">
    <tomcat-list url="${tomcaturl}" username="${tomcatusr}" password="${tomcatpwd}" />
  </target>

  -->
   
   <target name="ear" depends="war" description="packages ear file">
      <ear destfile="${distdir}/ashkelon.ear" appxml="${etcdir}/application.xml" basedir="${distdir}" includes="ashkelon.war" />
   </target>

  
  <!-- ================================== -->
  <!-- SECTION:  Documentation Production -->

  <property name="doc.srcdir" location="${srcdir}/doc" />
  <property name="docdir" location="doc" />

  <property name="ant.docbook.styler.dir" 
            location="/Users/eitan/devel/ant-docbook-styler" />
  <property name="ant.docbook.styler"
            location="${ant.docbook.styler.dir}/ant-build-docbook.xml" />

  <target name="cleandocs">
    <delete dir="${builddir}/doc/${kind}" />
    <delete dir="${docdir}/${kind}" />
  </target>

  <target name="builddocs" depends="cleandocs">
    <mkdir dir="${builddir}/doc/${kind}" />
    <mkdir dir="${docdir}/${kind}" />
    <ant antfile="${ant.docbook.styler}" inheritall="false" target="${kind}">
       <property name="docbook.xml.dir" location="${doc.srcdir}/xml" />
       <property name="docbook.resources.dir" location="${doc.srcdir}/resources" />
       <property name="distribution.dir" location="${docdir}/${kind}" />
       <property name="build.dir" location="${builddir}/doc/${kind}" />
       <property name="manual.name" value="guide" />
    </ant>
  </target>
  
  <target name="makedocs-single" description="produce html documentation (single file)">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="html.single" />
    </antcall>
  </target>
  
  <target name="makedocs-chunked" description="produce html documentation (chunked)">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="html.chunked" />
    </antcall>
  </target>

  <target name="makedocs-fo" description="transform documentation to fo">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="pdf.fop" />
    </antcall>
  </target>

  
  <target name="makedocs" description="produce documentation" 
    depends="makedocs-single, makedocs-chunked, makedocs-fo">
      <copy todir="${docdir}">
        <fileset dir="${doc.srcdir}" includes="*.txt,*.rtf" />
      </copy>
  </target>


 <!-- targets pertaining to junit testing -->

 <target name="test-init">
   <mkdir dir="${test.classes.dir}"/>
   <mkdir dir="${test.reports.dir}"/>
 </target>

 <target name="compile-tests" depends="test-init,bind" description="compile tests">
   <javac debug="on" deprecation="on"
          classpathref="test.classpath" destdir="${test.classes.dir}" srcdir="${test.src.dir}" />
 </target>

 <target name="run-tests" depends="compile-tests" description="run tests" >
    <junit fork="true" haltonfailure="true" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="brief" usefile="false" /> <!-- alternative type="xml" for producing reports -->
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/*Suite.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-test" description="run a test class" depends="compile-tests,bind">
   <java classname="${main.class}" classpathref="class.path" fork="true" />
 </target>


 <target name="test-report" depends="run-tests" description="produce junit reports">
   <junitreport todir="${test.reports.dir}">
     <fileset dir="${test.reports.dir}" includes="TEST-*.xml" />
     <report todir="${test.reports.dir}/html" />
   </junitreport>
 </target>


</project>
