<?xml version="1.0"?>

<project name="ashkelon" default="war">
   <description>open source java documentation management system</description>
   
   <property name="version" value="0.9.0" />
   <property environment="env" />
   <property name="tomcat.home" location="${env.CATALINA_HOME}" />

   <!-- currently, valid options are: mysql, postgres, mckoidb -->
   <property name="dbtype" value="postgres" />
   <property name="dbdir" location="db/${dbtype}" />

   <property name="srcdir" location="src" />
   <property name="builddir" location="build" />
   <property name="buildclassesdir" location="build/classes" />
   <property name="etcdir" location="etc" />
   <property name="distdir" location="dist" />
   
   <property name="libdir" location="lib" />
   <property name="libmgrdir" location="${libdir}/manager" />
   <property name="libtoolsdir" location="${libdir}/tools" />
   <property name="libwebdir" location="${libdir}/webapp" />

   <!-- for ashkelon static -->
   <property name="webapp.dir" location="${builddir}/webapp" />
   <!-- jsp artifacts: -->
   <property name="gendir" location="${builddir}/src" />

   <property name="test.dir" location="test" />
   <property name="test.src.dir" location="${test.dir}" />
   <property name="test.classes.dir" location="${buildclassesdir}" />
   <property name="test.lib.dir" location="lib/test" />
   <property name="test.reports.dir" location="${builddir}/reports" />

   <path id="class.path">
      <pathelement location="${java.home}/lib/tools.jar" />
      <fileset dir="${libmgrdir}" includes="*.jar" />
      <fileset dir="${libwebdir}" includes="*.jar" />
      <fileset dir="${dbdir}" includes="*.jar" />
      <pathelement location="${buildclassesdir}" />
   </path>

   <path id="test.classpath">
     <path refid="class.path" />
     <fileset dir="${test.lib.dir}" includes="**/*.jar" />
     <pathelement location="${test.classes.dir}" />
   </path>


   <target name="init">
      <mkdir dir="${buildclassesdir}" />
      <mkdir dir="${gendir}" />
      <mkdir dir="${distdir}" />
      <tstamp />
   </target>
   
   <target name="clean" description="delete build artifacts">
      <delete dir="${builddir}" />
      <delete dir="${distdir}" />
   </target>

   <taskdef name="build-statements" classname="org.ashkelon.db.StatementsBuilder"
     classpath="lib/tools/ashkelon-ant.jar" />

   <target name="compile" depends="init" description="compile">
      <javac debug="on" srcdir="${srcdir}" destdir="${buildclassesdir}" classpathref="class.path" />

      <copy todir="${buildclassesdir}">
        <fileset dir="${srcdir}" includes="org/**/*.xml,org/**/*.txt" />
      </copy>
      
      <copy todir="${buildclassesdir}">
        <fileset dir="${dbdir}" includes="org/**" />
      </copy>

      <build-statements dbtype="${dbtype}" 
         tofile="${buildclassesdir}/org/ashkelon/db/statements.properties" />

      <copy tofile="${builddir}/jdbc-driver.jar">
        <fileset dir="${dbdir}" includes="*.jar" /> <!-- should be a single file -->
      </copy>
   </target>

   <!-- JiBX binding compiler task definition -->
   <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
     <classpath>
       <pathelement location="${libtoolsdir}/bcel.jar" />
       <pathelement location="${libtoolsdir}/jibx-bind.jar" />
       <pathelement location="${libmgrdir}/jibx-run.jar" />
       <pathelement location="${libmgrdir}/xpp3.jar" />
     </classpath>
   </taskdef>

   <target name="bind" depends="compile" description="run JiBX binding compiler">
     <bind binding="${etcdir}/binding.xml">
       <classpathset dir="${buildclassesdir}" />
       <classpathset dir="${libdir}/jibx-run.jar" />
     </bind>
   </target>

   <target name="jar-model" description="jar core model" depends="bind">
      <jar destfile="${builddir}/ashkelon-model.jar" 
           basedir="${buildclassesdir}"
           includes="org/ashkelon/*,org/ashkelon/util/*,org/ashkelon/db/*,org/ashkelon/vcs/*" />
   </target>

   <target name="jar-manager" depends="jar-model" description="jar">
      <jar destfile="${builddir}/ashkelon-mgr.jar" 
           basedir="${buildclassesdir}" 
           includes="org/ashkelon/manager/**/*" />
   </target>

   <target name="jar-taglib" depends="compile" description="jar custom taglib">
      <jar destfile="${builddir}/ashkelon-taglib.jar"
           basedir="${buildclassesdir}"
           includes="org/ashkelon/taglibs/**/*" />
   </target>
   
   <target name="jar-webapp" description="jar web app code" depends="jar-model,jar-taglib">
      <jar destfile="${builddir}/ashkelon-webapp.jar"
           basedir="${buildclassesdir}"
           includes="org/ashkelon/pages/**/*" />
      <copy file="${etcdir}/web.xml" tofile="${builddir}/web.xml" filtering="true">
        <filterset>
          <filter token="SOURCEPATH" value="${env.SOURCEPATH}" />
        </filterset>
      </copy> 
   </target>

   <target name="war" depends="jar-webapp" description="produce war file for webapp">
      <war destfile="${distdir}/ashkelon.war" webxml="${builddir}/web.xml" basedir="htdocs">
         <lib dir="${libwebdir}" excludes="servlet.jar" />
         <lib dir="${dbdir}" includes="*.jar" />
         <lib dir="${builddir}" includes="ashkelon-model.jar" />
         <lib dir="${builddir}" includes="ashkelon-taglib.jar" />
         <lib dir="${builddir}" includes="ashkelon-webapp.jar" />
         <webinf dir="${etcdir}/tld" includes="*.tld" />
      </war>
   </target>


   <target name="ear" depends="war" description="packages ear file">
      <ear destfile="${distdir}/ashkelon.ear" appxml="${etcdir}/application.xml" basedir="${distdir}" includes="ashkelon.war" />
   </target>


   
   <target name="setup-webapp" depends="war"
           description="setup web application directory structure">
      <mkdir dir="${webapp.dir}" />
      <unjar src="${distdir}/ashkelon.war" dest="${webapp.dir}" />
      <delete dir="${webapp.dir}/basic" />
      <delete dir="${webapp.dir}/xul" />
      <delete dir="${webapp.dir}/templates" />
      <delete dir="${webapp.dir}/htc" />
   </target>
   
   <target name="jspc" description="compile jsp's" depends="setup-webapp">
      <taskdef classname="org.apache.jasper.JspC" name="jasper2" >
        <classpath id="jspc.classpath">
          <pathelement location="${java.home}/../lib/tools.jar"/>
          <fileset dir="${tomcat.home}/bin">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${tomcat.home}/server/lib">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${tomcat.home}/common/lib">
            <include name="*.jar"/>
          </fileset>
          <fileset dir="${webapp.dir}/WEB-INF/lib" includes="*.jar" />
        </classpath>
      </taskdef>

      <jasper2 validateXml="false"
               uriroot="${webapp.dir}"
               outputDir="${gendir}" />
   </target>
   
  <target name="compile-jsp" description="compile jsp" depends="jspc">
    <javac destdir="${buildclassesdir}"
           optimize="off"
           debug="on" failonerror="false"
           srcdir="${gendir}" 
           excludes="**/*.smap">
      <classpath>
        <pathelement location="${tomcat.home}/common/classes"/>
        <fileset dir="${tomcat.home}/common/lib" includes="*.jar" />
        <pathelement location="${tomcat.home}/shared/classes"/>
        <fileset dir="${tomcat.home}/shared/lib" includes="*.jar" />
        <fileset dir="${tomcat.home}/bin" includes="*.jar" /> 
        <fileset dir="${webapp.dir}/WEB-INF/lib" includes="*.jar" />
        <pathelement location="${webapp.dir}/WEB-INF/classes" />
      </classpath>
      <include name="**" />
      <exclude name="tags/**" />
    </javac>
  </target>
   
  <!-- ================================== -->
  <!-- SECTION:  Documentation Production -->

  <property name="doc.srcdir" location="${srcdir}/doc" />
  <property name="docdir" location="doc" />

  <property name="ant.docbook.styler.dir" 
            location="/home/eitan/devel/ant-docbook-styler" />
  <property name="ant.docbook.styler"
            location="${ant.docbook.styler.dir}/ant-build-docbook.xml" />

  <target name="cleandocs">
    <delete dir="${builddir}/doc/${kind}" />
    <delete dir="${docdir}/${kind}" />
  </target>

  <target name="builddocs" depends="cleandocs">
    <mkdir dir="${builddir}/doc/${kind}" />
    <mkdir dir="${docdir}/${kind}" />
    <ant antfile="${ant.docbook.styler}" inheritall="false" target="${kind}">
       <property name="docbook.xml.dir" location="${doc.srcdir}/xml" />
       <property name="docbook.resources.dir" location="${doc.srcdir}/resources" />
       <property name="distribution.dir" location="${docdir}/${kind}" />
       <property name="build.dir" location="${builddir}/doc/${kind}" />
       <property name="manual.name" value="guide" />
    </ant>
  </target>
  
  <target name="makedocs-single" description="produce html documentation (single file)">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="html.single" />
    </antcall>
  </target>
  
  <target name="makedocs-chunked" description="produce html documentation (chunked)">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="html.chunked" />
    </antcall>
  </target>

  <target name="makedocs-fo" description="transform documentation to fo">
    <antcall target="builddocs" inheritall="false">
      <param name="kind" value="pdf.fop" />
    </antcall>
  </target>

  
  <target name="makedocs" description="produce documentation" 
    depends="makedocs-single, makedocs-chunked, makedocs-fo">
      <copy todir="${docdir}">
        <fileset dir="${doc.srcdir}" includes="*.txt,*.rtf" />
      </copy>
  </target>


 <!-- targets pertaining to junit testing -->

 <target name="test-init">
   <mkdir dir="${test.classes.dir}"/>
   <mkdir dir="${test.reports.dir}"/>
 </target>

 <target name="compile-tests" depends="test-init,bind" description="compile tests">
   <javac debug="on" deprecation="on"
          classpathref="test.classpath" destdir="${test.classes.dir}" srcdir="${test.src.dir}" />
 </target>

 <target name="run-tests" depends="compile-tests" description="run tests" >
    <junit fork="true" haltonfailure="true" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="brief" usefile="false" /> <!-- alternative type="xml" for producing reports -->
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/*Suite.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-test" description="run a test class" depends="compile-tests,bind">
   <java classname="${main.class}" classpathref="class.path" fork="true" />
 </target>


 <target name="test-report" depends="run-tests" description="produce junit reports">
   <junitreport todir="${test.reports.dir}">
     <fileset dir="${test.reports.dir}" includes="TEST-*.xml" />
     <report todir="${test.reports.dir}/html" />
   </junitreport>
 </target>


</project>
