#
# Preliminary Statements file
#  next Version will use xml
#

# makeapi

makeapi=select id, name, summarydescription, description, publisher, download_url, release_date, version from API where id=? order by name

# makepackage

makepackage=select p.id, p.name, d.summarydescription, d.description, d.since, d.deprecated, d.id, a.name, p.api_id from package p, doc d, api a where p.id=? and p.docid=d.id and p.api_id=a.id (+) order by p.name

# makeclass

makeclass=select c.id, c.qualifiedname, c.name, c.superclassname, c.version, c.type, c.packageid, s.superclassid, d.description, d.summarydescription, d.since, d.deprecated, d.id, c.modifier, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.containingclassname, cc.id, p.name, api.name, api.id from classtype c, doc d, superclass s, package p, classtype cc, api where c.id=? and c.docid=d.id and c.id=s.classid (+) and c.packageid=p.id and c.containingclassname=cc.qualifiedname (+) and p.api_id=api.id

# classinfo

classinfo=select c.qualifiedname, c.type, c.id, c.superclassname, s.superclassid, d.summarydescription, d.since, d.deprecated, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.modifier from classtype c, doc d, superclass s where c.packageid=? and c.containingclassname is null and c.docid=d.id and c.id=s.classid (+) order by c.type, c.name, isstatic, isabstract

# packageinfo

packageinfo=select p.id, p.name, d.summarydescription from package p, doc d where p.api_id=? and p.docid=d.id order by p.name

# getmembers

getmembers=select * from ( select m.id, m.qualifiedname, m.type, m.isstatic, m.isfinal, m.accessibility, m.modifier, meth.isabstract, meth.returntypeid, meth.returntypename, meth.returntypedimension, em.signature, d.summarydescription, d.since, d.deprecated from member m, doc d, method meth, execmember em where lower(m.name) >= ? and m.docid = d.id and m.id = meth.id (+) and m.id = em.id (+) order by lower(m.name) ) where rownum <= 21

# getclasses

getclasses=select * from ( select c.id, c.qualifiedname, c.type, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.modifier, d.summarydescription, d.since, d.deprecated from classtype c, doc d where lower(c.name) >= ? and c.docid = d.id  order by lower(c.name) ) where rownum <=21

# getauthors

getauthors=select * from ( select id, name from author where lower(name) >= ? order by lower(name) ) where rownum <= 21
getallauthors=select id, name from author order by lower(name)

# getpackages

getpackages=select * from ( select p.id, p.name, d.summarydescription, d.since, d.deprecated from package p, doc d where lower(p.name) >= ? and p.docid=d.id order by p.name ) where rownum < 21

# getpackages2

getpackages2=select p.id, p.name, d.summarydescription, d.since, d.deprecated from package p, doc d where p.docid=d.id order by p.name

# getapis

getapis=select id, name, summarydescription, publisher, version from api order by name

# classstats

classstats=select p.name, p.id, count(*) from classtype c, package p where c.packageid=p.id group by p.name, p.id order by p.name

# authorstats

authorstats=select * from ( select a.name, a.id, count(*) from classtype c, author a, class_author ca where c.id=ca.classid and a.id=ca.authorid group by a.name, a.id order by count(*) desc ) where rownum <= 50

# package count by api

apistatspkg=select count(*), api.name from package, api where package.api_id = api.id group by api_id, api.name order by api.name

# class count by api

apistatscls=select count(*), api.name from classtype, api, package where classtype.packageid=package.id and package.api_id=api.id group by api_id, api.name order by api.name

# member count by api

apistatsmmb=select count(*), api.name from member, classtype, package, api where member.classid=classtype.id and classtype.packageid=package.id and package.api_id=api.id group by api_id, api.name order by api.name

#

xref_fields=select m.qualifiedname, f.id, f.typename, f.typedimension, d.summarydescription, m.isstatic, m.isfinal, m.accessibility, d.deprecated from field f, member m, doc d where f.typeid=? and f.id=m.id and m.docid=d.id and rownum < 50 order by m.qualifiedname

#

xref_returnedby=select m.qualifiedname, m.id, m.isstatic, m.isfinal, m.accessibility, m.modifier, ex.signature, meth.returntypename, meth.returntypedimension, meth.isabstract, d.summarydescription, d.since, d.deprecated from method meth, execmember ex, member m, doc d where meth.returntypeid=? and meth.id=ex.id and meth.id=m.id and m.docid=d.id and rownum < 50 order by m.qualifiedname

#

xref_passedto=select m.qualifiedname, m.id, m.type, ex.signature, d.summarydescription, d.since, d.deprecated, p.typedimension, p.name, m.isstatic, m.isfinal, m.accessibility, m.modifier, meth.isabstract from parameter p, execmember ex, member m, method meth, doc d where p.typeid=? and p.execmemberid=ex.id and ex.id=m.id and meth.id=m.id and m.docid=d.id and rownum < 50 order by m.qualifiedname, m.type

#

xref_thrownby=select mem.qualifiedname, mem.id, mem.type, ex.signature, d.summarydescription, te.description, te.name from thrownexception te, execmember ex, member mem, doc d where te.exceptionid=? and te.throwerid=ex.id and ex.id=mem.id and mem.docid=d.id and rownum < 50 order by mem.qualifiedname, mem.type

#

xref_implementedbyclasstarget=select c.qualifiedname, c.id, d.summarydescription, c.type from IMPL_INTERFACE ii, CLASSTYPE c, DOC d where ii.interfaceid=? and ii.classid=c.id and c.type !=? and c.docid=d.id and rownum < 50 order by c.qualifiedname
xref_implementedby=select c.qualifiedname, c.id, d.summarydescription, c.type from IMPL_INTERFACE ii, CLASSTYPE c, DOC d where ii.interfaceid=? and ii.classid=c.id and c.type =? and c.docid=d.id and rownum < 50 order by c.qualifiedname

#

xref_subclass=select c.qualifiedname, c.id, d.summarydescription, c.type from classtype c, doc d where c.superclassname=? and c.type != ? and c.docid=d.id and rownum < 50 order by c.qualifiedname

# sequence-related statements

update_seq=UPDATE SEQS SET SEQVAL=? WHERE SEQNAME=?

add_seq=INSERT INTO SEQS (SEQNAME, SEQVAL) VALUES (?, ?)

get_seqs=SELECT * FROM SEQS

# getclassid

getclassid=select id from CLASSTYPE where qualifiedname=?

# getmemberid

getmemberid=select id from MEMBER where qualifiedname=?

# getpkgid

getpkgid=select id from PACKAGE where name=?

# fetch authorclasses

fetch_authorclasses=select c.id, c.qualifiedname from CLASSTYPE c, CLASS_AUTHOR ca where ca.authorid=? order by c.qualifiedname

# fetchauthor

fetchauthor=select a.name, c.id, c.qualifiedname, c.type from AUTHOR a, CLASSTYPE c, CLASS_AUTHOR ca where a.id=? and ca.authorid=a.id and c.id=ca.classid order by c.qualifiedname

# get class and doc id's

getclsanddocid=select c.id, c.docid from CLASSTYPE c where c.qualifiedname=?

# get field and doc id's

getfieldanddocid=select FIELD.id, MEMBER.docid from FIELD, MEMBER where MEMBER.classid = ? and FIELD.id = MEMBER.id

# get method and doc id's

getmethodanddocid=select METHOD.id, MEMBER.docid from METHOD, MEMBER where MEMBER.classid = ? and METHOD.id = MEMBER.id

# get constructor and doc id's

getconstranddocid=select CONSTRUCTOR.id, MEMBER.docid from CONSTRUCTOR, MEMBER where MEMBER.classid = ? and CONSTRUCTOR.id = MEMBER.id

# deleteclassauthor

deleteclassauthor=delete from CLASS_AUTHOR where classid = ?

# deleteinterfaces

deleteinterfaces=delete from IMPL_INTERFACE where classid = ?

# deletesuperclass

deletesuperclass=delete from SUPERCLASS where classid = ?

# deleteinnercls

deleteinnercls=delete from CLASSTYPE where containingclassname=?

# getdescendents

getdescendents=select a.classid, c.qualifiedname, c.superclassname, c.type, d.summarydescription from CLASS_ANCESTORS a, CLASSTYPE c, doc d where a.superclassid=? and a.classid=c.id and c.docid=d.id

#

