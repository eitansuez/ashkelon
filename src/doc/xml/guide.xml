<?xml version='1.0'?>
<!DOCTYPE book
      PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
      "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
   <title>Ashkelon Users Guide</title>
   <titleabbrev>Ashkelon</titleabbrev>

   <bookinfo>
      <title>
         <inlinegraphic fileref="figures/ashkelon-logo.gif" format="GIF"/>
         ashkelon
      </title>
      <author>
         <personname>
            <firstname>Eitan</firstname>
            <surname>Suez</surname>
         </personname>
         <email>eitan-keyword-deux.352d02@u2d.com</email>
      </author>
      <date>October 14 2002 (last updated Februrary 2006)</date>
   </bookinfo>


   <chapter>
      <title>Overview</title>

      <para>
         ashkelon is an open source project. It is a Java API documentation
         tool designed for Java developers. Its goals are the same as the goals
         of the well-known javadoc tool that comes with J2SE, whose user interface most
         java developers are quite familiar with (see:
         <ulink url="http://java.sun.com/j2se/javadoc/">http://java.sun.com/j2se/javadoc/</ulink>
         if you'd like to learn more about javadoc)
      </para>

      <para>
         ashkelon addresses the following issues that javadoc does not:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               ashkelon is a multi-API documentation system, unlike javadoc which produces single-API
               documentation</para>
         </listitem>
         <listitem>
            <para>
               ashkelon's documentation system leverages
               <acronym>SQL</acronym>
               to provide a queriable/searchable repository for documentation
            </para>
         </listitem>
         <listitem>
            <para>
               The <acronym>DHTML</acronym> <acronym>GUI</acronym> produced by 
               ashkelon (works with all major browsers) is markedly different
               from the defacto html 3.2 user interface produced by javadoc, 
               which I termed "classic."
            </para>
         </listitem>
         <listitem>
            <para>
               ashkelon's user interface is a Java web application, not a set of static html pages</para>
         </listitem>
      </itemizedlist>

      <para>
         The javadoc tool is composed of two parts:
      </para>

      <orderedlist>
         <listitem>
            <para>
               The documentation generator, used to produce html (or other) documentation
            </para>
         </listitem>
         <listitem>
            <para>
               a graphical user interface used to browse and peruse through the documentation (static html pages)
            </para>
         </listitem>
      </orderedlist>

      <para>
         Sometimes the same person performs both the generation and referencing the documentation. however, the more
         common case is that of an API publisher producing javadocs for the API user who references them.
      </para>

      <para>
         Similarly, ashkelon is also composed of two parts:
      </para>

      <orderedlist>
         <listitem>
            <para>
               the
               <emphasis>repository manager</emphasis>, used to populate 
               and otherwise manage a database with documentation information
            </para>
         </listitem>
         <listitem>
            <para>
               The
               <emphasis>viewer application</emphasis>
               , a web application that provides access to the documentation 
               in a variety of ways (search, browse,
               cross-reference, etc..). this application is 
               markedly different from javadoc's user interface in a number
               of ways.
            </para>
         </listitem>
      </orderedlist>
      
      <sect1>
         <title>Usage Scenarios</title>

      <para>
         In a workgroup environment, a development team needs to reference 
         a number of APIs from a number of sources, including:
      </para>

      <orderedlist>
         <listitem>
            <para>
               Internal company code
            </para>
         </listitem>
         <listitem>
            <para>
               Sun APIs (J2SE, J2EE, etc..)
            </para>
         </listitem>
         <listitem>
            <para>
               Popular third party APIs (from Apache, Sourceforge, or other)
            </para>
         </listitem>
      </orderedlist>

      <para>
         A developer may be appointed to the task of administrator. This individual would be in charge of using the
         repository manager to populate the ashkelon database with the API documentation. Alternatively, this person may
         choose to automate the task entirely and enhance the nightly build process to automatically rebuild the
         ashkelon repository with the latest docs.
      </para>

      <para>
         The entire development team would use the viewer application as its window into the documentation. One of the
         strengths of ashkelon is the various ways in which someone can access information about a Programming Element:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               Hierarchical navigation to a target class or method
            </para>
         </listitem>
         <listitem>
            <para>
               Search by name
            </para>
         </listitem>
         <listitem>
            <para>
               Search by wildcard
            </para>
         </listitem>
         <listitem>
            <para>
               Navigating programmatic relationships
            </para>
         </listitem>
         <listitem>
            <para>
               Cross referencing classes or interfaces
            </para>
         </listitem>
         <listitem>
            <para>
               Power search feature (search by meta information such as author, modifier (et al) or a combination
               thereof
            </para>
         </listitem>
      </itemizedlist>

      <para>
         An important difference with ashkelon is that as an administrator,
         you will use the repository manager repeatedly to add new APIs
         into the repository. You don't have to (and should not try to)
         add all APIs in one step.
      </para>

      <para>
         In a large community environment, it is conceivable that a single high-availability site be made available to the
         general Java developer community. Such a site might provide API publishers with online tools to register and
         populate their APIs in this "global" repository. The end-result would be publicly-accessible Java API
         documentation for many APIs which would be constantly kept up-to-date by the various API publishers.
      </para>
      
      </sect1>

   </chapter>

   <chapter>
      <title>Download</title>

      <para>
         Here are the relevant project and download URLs:
      </para>

      <variablelist>
      <varlistentry>
         <term>
            askhelon Project Home Page
         </term>
         <listitem>
            <para>
               <ulink url="http://ashkelon.sourceforge.net/">http://ashkelon.sourceforge.net/</ulink>
            </para>
         </listitem>
      </varlistentry>

      <varlistentry>
         <term>
            askhelon's SourceForge project page
         </term>
         <listitem>
            <para>
               <ulink url="http://sourceforge.net/projects/ashkelon/">http://sourceforge.net/projects/ashkelon/</ulink>
            </para>
         </listitem>
      </varlistentry>

      <varlistentry>
         <term>
            Download URL
         </term>
         <listitem>
            <para>
               <ulink url="http://sourceforge.net/project/showfiles.php?group_id=54364">http://sourceforge.net/project/showfiles.php?group_id=54364</ulink>
            </para>
         </listitem>
      </varlistentry>
      </variablelist>

      
      <para>
         Visit the project download page.  Select to download ashkelon in 
         whichever compression format you prefer (.zip or .tgz).  After
         the download is complete, unpack the compressed file.  You should
         now have an ashkelon working directory.
      </para>

      <para>
         We are more than happy to assist you with getting ashkelon 
         properly configured and installed in your environment.
         Feel free to email Eitan directly at
         <email>eitan-keyword-deux.352d02@u2d.com</email> or the
         appropriate mailing list.
      </para>

      <variablelist>
         <varlistentry>
            <term>
               ashkelon Users mailing list
            </term>
            <listitem>
               <para>
                  <email>ashkelon-users@lists.sourceforge.net</email>
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               ashkelon Developers mailing list
            </term>
            <listitem>
               <para>
                  <email>ashkelon-devs@lists.sourceforge.net</email>
               </para>
            </listitem>
         </varlistentry>
      </variablelist>


   </chapter>


   <chapter>
      <title>Installation</title>

      <sect1>
         <title>Requirements</title>

         <orderedlist>
            <listitem>
               <para>
                  J2SE v1.4.x or higher
               </para>
            </listitem>
            <listitem>
               <para>
                  A servlet &amp; JSP container (I use Jakarta Tomcat 5.5 at the moment, but have used or received
                  reports from many users and/or vendors that ashkelon works with their servlet container)
               </para>
            </listitem>
            <listitem>
               <para>
                  postgresql (
                  <ulink url="http://www.postgresql.org/">http://www.postgresql.org/</ulink>
                  ) or mysql (
                  <ulink url="http://www.mysql.org">http://www.mysql.org</ulink>
                  )
               </para>
            </listitem>
            <listitem>
               <para>
                  Jakarta Ant (v1.5 or higher) (
                  <ulink url="http://ant.apache.org">http://ant.apache.org</ulink>
                  )
               </para>
            </listitem>
         </orderedlist>

      </sect1>

      <sect1>
         <title>Configuration</title>


         <sect2>
            <title>Environment</title>

            <orderedlist>
               <listitem>
                  <para>
                     Download &amp; unpack the ashkelon tarball
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Make sure your <envar>$JAVA_HOME</envar>
                     environment variable is set
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Set up <envar>ASHK_HOME</envar> environment variable
                  </para>
                  <example>
                     <title>Windows</title>
                     <screen>
      set ASHK_HOME=c:\ashkelon
                     </screen>
                  </example>
                  <example>
                     <title>bash</title>
                     <screen>
      export ASHK_HOME=~/ashkelon
                     </screen>
                  </example>
               </listitem>
               <listitem>
                  <para>
                     Add <filename class="directory">$ASHK_HOME/bin</filename>
                     to your path:
                  </para>
                  <screen>
      <prompt>$</prompt> <command>export</command> PATH=$PATH:$ASHK_HOME/bin
                  </screen>
               </listitem>
            </orderedlist>

         </sect2>

         
         <sect2>
         <title>Configuration Files</title>
         
         <sect3>
         <title>SourceCache Base Path</title>
         
         <para>
         In version 0.9 ashkelon now has the capability to auto-fetch API source code from either subversion or cvs version control systems.  ashkelon therefore will use a temporary directory as the base path for keeping a cache of source code.
         </para>
         
         <para>In the file <filename>src/org/ashkelon/ashkelon-config.xml</filename>, specify the base path that ashkelon will use for its source cache.  If the path does not exist, ashkelon will attempt to create the specified directory.
         </para>
         
         </sect3>
         
         <sect3>
         <title>Database Connection Information</title>
         
         <note>
            <para>As you read this section, substitute the database type you'll 
               be using (mysql or postgres) wherever you see the "placeholder"
               text <replaceable>${dbtype}</replaceable></para>
         </note>

         <orderedlist>
            <listitem>
               <para>
                  Edit
                  <filename>db/
                     <replaceable>${dbtype}</replaceable>
                     /org/ashkelon/db/conn-info.properties
                  </filename>
                  to specify the proper database connection information:
               </para>

               <screen>
      #
      dbtype=mysql
      jdbcDriverName=com.mysql.jdbc.Driver
      connectionURL=jdbc:mysql://localhost/ashkelon
      user=ashkelon
      password=ashkelon
               </screen>

               <para>or</para>
               
               <screen>
      #
      dbtype=postgres
      jdbcDriverName=org.postgresql.Driver
      connectionURL=jdbc:postgresql://localhost/ashkelon
      user=ashkelon
      password=ashkelon
               </screen>
            </listitem>
         </orderedlist>
         
         </sect3>
         
         </sect2>
         
         <sect2>
            <title>Prepare Database</title>

            <orderedlist>
               <listitem>
                  <para>
                     Create the ashkelon database:
                  </para>

                  <example>
                     <title>For mysql</title>
                     <screen><![CDATA[
      c:\> mysql -u root -p
      mysql> create database ashkelon;
      mysql> exit
      ]]>
                     </screen>
                  </example>
                  <example>
                     <title>For postgresql</title>
                     <screen>
      ~$ createdb -U postgres ashkelon
                     </screen>
                  </example>
               </listitem>

               <listitem>
                  <para>Generate the schema. Run script:
                     <filename>db/<replaceable>${dbtype}</replaceable>
                        /org/ashkelon/db/init.sql
                     </filename>
                  </para>
                  <example>
                     <title>Using mysql</title>
                     <screen>
   c:\ashkelon&gt; mysql -u root -p ashkelon 
                         &lt; db\mysql\org\ashkelon\db\init.sql
                     </screen>
                  </example>

                  <example>
                     <title>Using postgresql</title>
                     <screen>
      ~/ashkelon&gt; psql -U ashkelon ashkelon
      ashkelon#= \i db/postgres/org/ashkelon/db/init.sql
      ashkelon#= \q
                     </screen>
                  </example>
               </listitem>
            </orderedlist>

         </sect2>

         <sect2>
         <title>Build ashkelon manager codebase</title>
         
               <para>Build and create the ashkelon jar file:</para>

               <example>
                  <title>For mysql</title>
                  <screen>
      <prompt>$</prompt> <command>ant</command> -Ddbtype=mysql jar-manager
                  </screen>
               </example>

               <example>
                  <title>For postgresql</title>
                  <screen>
      <prompt>$</prompt> <command>ant</command> -Ddbtype=postgres jar-manager
                  </screen>
               </example>

         <para>Rather than specify dbtype from the command line, feel
         free to edit the build.xml file directly.  This way you won't
         have to remember how to construct your ant command line each
         time.</para>
         
         
         </sect2>


         <sect2>
            <title>Verify "ashkelon" cmd works</title>

            <para>Verify that the "ashkelon" command works.  Invoke it with no 
            parameters from the command line.</para>
            
            <screen>
   <prompt>$</prompt> <command>ashkelon</command>
            </screen>

            <para>
               should produce this help/usage screen
            </para>
            
            <screen>
      Ashkelon Repository Manager (v 0.9)
      ----------
      Description:
        Manages a Java Documentation Repository.
        For more information, visit http://ashkelon.sourceforge.net/
   
      Examples:
        ashkelon reset
        ashkelon add hibernate.xml
        ashkelon list
        ashkelon remove Hibernate
        ashkelon html -d junit-javadocs apis/junit.xml
   
      Usage:
        ashkelon {command} [options]
   
        Valid commands:
   
          add         Add an API to repository
          remove      Remove specified API from the repository
          update      Update an API
          list        List APIs currently residing in the repository
          reset       Reset repository (i.e. delete everything, use with care)
          export      Dump list of APIs as XML to System.out
          html        Produce static HTML pages (with ashkelon look and feel)
   
      For command-specific help, type:
        ashkelon {command} -h
   
      Caveats:
        No work done yet to support J2SE 5.
      ----------
      Copyleft
            </screen>

         </sect2>

         <sect2>
            <title>Finish setting up database schema</title>

            <screen>
   <prompt>$</prompt> <command>ashkelon</command> reset
            </screen>

         </sect2>

      </sect1>

      <sect1>
         <title>Populate Database</title>

         <example>
            <title>Populating DOM4J API</title>
            
         <screen>
   ~ashkelon$ cd apis
   ~ashkelon/apis$ ashkelon add dom4j.xml
   [press enter]
         </screen>

         <para>
            If everything goes well, you should end up with your 
            database populated with the Java API documentation for 
            DOM4J.
            </para>
            
            <para>
            Ashkelon basically downloads the source code for the
            project (per the cvs or subversion repository information
            specific in the xml file) and places a copy in its 
            "source cache" area on disk.  Ashkelon the proceeds to
            invoke javadoc with itself as the doclet, in order to
            parse and populate the database with the API information.
         </para>
            
         <para>
            You can list the APIs in the ashkelon database like this:
            
            <screen>
   eitan@ubuntu:~/projects/ashkelon/apis$ ashkelon list
   ashkelon@ubuntu:~/projects/ashkelon/apis$ ashkelon list
   Ashkelon: 1 APIs in ashkelon:
   Ashkelon:    dom4j
            </screen>
         </para>

         <para>Continue to add as many APIs as you desire.  They all
            get added to the same database and cross-references between
            APIs are resolved.
         </para>
         </example>

            <note>
            <para>
            There's a bug at the moment with v0.9 regarding inability
            to autodetect and supply a cvs password.  If for some reason
            ashkelon appears to have "hanged", usually after a line that
            resemples this: 
            </para>
            <para>
              CVS password: add: Logging in to :pserver:guest@cvs.dev.java.net:2401/cvs
            </para>
            <para>Then this means that the invoked cvs command is waiting for
            a password before proceeding.  Since almost all open source projects
            use a blank password for anonymous cvs login, simply press enter.  I apologize for the inconvenience.</para>
            </note>
            
      </sect1>

      <sect1>
         <title>Setup the Ashkelon Web Application</title>
         
         <screen>
      eitan@ubuntu:~/projects/ashkelon$ ant war
      [output]
      Buildfile: build.xml
      init:
      compile:
      bind:
      jar-model:
            [jar] Building jar: /home/eitan/projects/ashkelon/build/ashkelon-model.jar
      jar-taglib:
            [jar] Building jar: /home/eitan/projects/ashkelon/build/ashkelon-taglib.jar
      jar-webapp:
            [jar] Building jar: /home/eitan/projects/ashkelon/build/ashkelon-webapp.jar
           [copy] Copying 1 file to /home/eitan/projects/ashkelon/build
      war:
            [war] Building war: /home/eitan/projects/ashkelon/dist/ashkelon.war
   
      BUILD SUCCESSFUL
      Total time: 3 seconds
      [end output]
      eitan@ubuntu:~/projects/ashkelon$ ls dist/
      ashkelon.war
      eitan@ubuntu:~/projects/ashkelon$ cp dist/ashkelon.war ~/devel/tomcat/webapps
         </screen>
         
         <para>
            If necessary, restart tomcat or load the new web application and
            explore 
            <ulink url="http://localhost:8080/ashkelon/">http://localhost:8080/ashkelon/</ulink>
         </para>

      </sect1>

   </chapter>


   <chapter>
      <title>
         Administrator Guide: Using the Repository Manager
      </title>

      <para>
         The ashkelon command-line tool is called "ashkelon". It is
         a wrapper shell script for a Java program. On win32, the file
         is "ashkelon.bat" while on unix it's "ashkelon." These files reside in $ASHK_HOME/bin
      </para>

      <para>
         You will primarily use the ashkelon tool to add content to your database. Here is
         a listing of some of the subcommands:
      </para>

      <variablelist>
         <varlistentry>
            <term>
               <command>ashkelon add</command>
            </term>
            <listitem>
               <para>use to add APIs to your database</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <command>ashkelon reset</command>
            </term>
            <listitem>
               <para>use to "nuke" the contents of the database (start from scratch)</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <command>ashkelon list</command>
            </term>
            <listitem>
               <para>lists the APIs currently documented in the database</para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>
               <command>ashkelon remove</command>
            </term>
            <listitem>
               <para>opposite of ashkelon add, use it to remove APIs from the repository</para>
            </listitem>
         </varlistentry>
      </variablelist>

      
      <para>You can obtain a listing of all the subcommands by invoking 
       ashkelon with no arguments.  For help per subcommand, invoke ashkelon
      like this:</para>
      
      <screen>
  ashkelon <replaceable>subcommandname</replaceable> -h
      </screen>
      
      <para>
         <command>ashkelon reset</command> and <command>ashkelon list</command>
         require no parameters and likewise require no explanation.
      </para>

      <para>
         <command>ashkelon add</command>
         is richer. Let's talk about "ashkelon add".
      </para>

      <sect1>
         <title>Documenting Source Code</title>

         <para>
            Traditionally (i.e. with javadoc) one documents a single API. So the inputs to the javadoc tool are a list
            of package names, such as {java.lang, java.io, java.net, ..}
         </para>

         <para>
            When documenting multiple APIs in a single repository, it's important to also keep track of 
            what API each java package belongs to. That is, <envar>org.apache.tools.ant</envar> is part of 
            the ant API whereas <envar>org.apache.log4j</envar> is part of the log4j API.
         </para>

         <para>
            The ashkelon project has devised a simple XML structure to describe an API. Here's an example 
            API XML file for DOM4J (see apis/dom4j.xml):
         </para>

         <example>
            <title>DOM4J API XML file descriptor for ashkelon</title>
            <programlisting>
               <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<api>
   <name>dom4j</name>
   <summarydescription>The flexible XML framework for Java</summarydescription>
   <description>dom4j is an easy to use, open source library...</description>
   <publisher>SourceForge</publisher>
   <download_url>http://www.dom4j.org/</download_url>
   <release_date>2005-04-15T08:00:00</release_date>
   <version>1.6</version>
   <packages>
      <package>org.dom4j</package>
      <package>org.dom4j.bean</package>
      <package>org.dom4j.datatype</package>
      <package>org.dom4j.dom</package>
      <package>org.dom4j.dtd</package>
      <package>org.dom4j.io</package>
      <package>org.dom4j.jaxb</package>
      <package>org.dom4j.rule</package>
      <package>org.dom4j.rule.pattern</package>
      <package>org.dom4j.swing</package>
      <package>org.dom4j.tree</package>
      <package>org.dom4j.util</package>
      <package>org.dom4j.xpath</package>
      <package>org.dom4j.xpp</package>
   </packages>
   <repository>
     <type>cvs</type>
     <url>:pserver:anonymous@cvs.sourceforge.net:/cvsroot/dom4j</url>
     <modulename>dom4j</modulename>
     <sourcepath>src/java</sourcepath>
   </repository>
</api>
  ]]>
            </programlisting>
         </example>

         <para>
            This file is similar to the
            <filename>package.html</filename>
            file that you usually have to write for javadoc package documentation. Except that this file is xml-based
            and thus more structured, and easier to interpret by a program.
         </para>

         <para>
            These xml api descriptors are the primary input to the ashkelon command (aside from the actual source code
            that you're trying to document).  Many descriptors already exist in 
            in ashkelon's <filename class="directory">apis</filename> directory.
         </para>
         
      </sect1>
      
      <sect1>
         <title>The apixml Tool</title>
         
      <para>
         ashkelon provides a tool called "apixml" that assists you in producing
         ashkelon API descriptors.
      </para>
      
      <para>
         For a given API, search its javadocs 
         directory for a file named <filename>package-list</filename>.  This file is a sort
         of signature that javadoc leaves behind after processing an API.
      </para>
      
      <para>
        Feed apixml this file and it will produce an almost completed
        xml descriptor file for you.  In the example session below,
        I process junit's package-list through <command>apixml</command>.
        The xml output is produced by apixml.  Now simply specify the 
        missing pieces:  API name, description, publisher, url, and 
        version control system information.
      </para>
        
      <screen>
eitan@ubuntu:~/devel/junit/javadoc$ apixml package-list
               <![CDATA[

<?xml version="1.0" encoding="UTF-8"?>
<api>
   <name/>
   <summarydescription/>
   <description/>
   <publisher/>
   <download_url/>
   <release_date>2006-02-03T20:21:45.151</release_date>
   <version/>
   <packages>
      <package>junit.extensions</package>
      <package>junit.framework</package>
   </packages>
   <repository>
      <type>cvs</type>
      <url>:pserver:anonymous@cvs.sourceforge.net:/cvsroot/[projectname]</url>
      <modulename>[projectname]</modulename>
      <tagname/>
      <sourcepath>src/java</sourcepath>
   </repository>
</api>
eitan@ubuntu:~/devel/junit/javadoc$
</screen>
]]>
</screen>

</sect1>

<sect1>
<title>Example: Populating DOM4J</title>
            
         <para>
         Let's run through a quick example.  We first produce
         dom4j.xml:
         </para>

         <screen>
eitan@ubuntu:~/devel/dom4j/docs/apidocs$ apixml package-list > dom4j.xml
         </screen>

         <para>
           Check out <filename>apis/dom4j.xml</filename> to see how the base
           XML descriptor produced by apixml was completed.
           We're now ready to ask ashkelon to put DOM4J
           into our database.  Let's first see what we have already..
         </para>

<screen>
eitan@ubuntu:~/projects/ashkelon/apis$ ashkelon list
Ashkelon: 9 APIs in ashkelon:
Ashkelon:    Hibernate
Ashkelon:    jEdit
Ashkelon:    FlexDock
Ashkelon:    Servlet
Ashkelon:    L2FProd.com Common Components
Ashkelon:    log4j
Ashkelon:    JiBX
Ashkelon:    JUnit
Ashkelon:    J2SE
eitan@ubuntu:~/projects/ashkelon/apis$
</screen>
      
<para>
Ok, let's add dom4j:
</para>

<screen>
eitan@ubuntu:~/projects/ashkelon/apis$ ashkelon add dom4j.xml
</screen>

<para>And here's the output (less the javadoc warnings)</para>

<screen>
add: cmd is: cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/dom4j -q update -d  -r HEAD dom4j/src/java
Loading source files for package org.dom4j...
Loading source files for package org.dom4j.bean...
Loading source files for package org.dom4j.datatype...
Loading source files for package org.dom4j.dom...
Loading source files for package org.dom4j.dtd...
Loading source files for package org.dom4j.io...
Loading source files for package org.dom4j.jaxb...
Loading source files for package org.dom4j.rule...
Loading source files for package org.dom4j.rule.pattern...
Loading source files for package org.dom4j.swing...
Loading source files for package org.dom4j.tree...
Loading source files for package org.dom4j.util...
Loading source files for package org.dom4j.xpath...
Loading source files for package org.dom4j.xpp...
Constructing Javadoc information...
[a bunch of javadoc side-effect warnings suppressed]
Ashkelon: 14 packages to process..
Ashkelon: Processing package org.dom4j..
Ashkelon: Processing package org.dom4j.bean..
Ashkelon: Processing package org.dom4j.datatype..
Ashkelon: Processing package org.dom4j.dom..
Ashkelon: Processing package org.dom4j.dtd..
Ashkelon: Processing package org.dom4j.io..
/home/eitan/projects/sourcecache/dom4j/src/java/org/dom4j/io/HTMLWriter.java:181:
warning - Tag @link: missing '#': "OutputFormat.isXHTML() OutputFormat.isXHTML()"
/home/eitan/projects/sourcecache/dom4j/src/java/org/dom4j/io/HTMLWriter.java:181: 
warning - Tag @link: can't find OutputFormat.isXHTML() in org.dom4j.io.HTMLWriter
Ashkelon: Processing package org.dom4j.jaxb..
Ashkelon: Processing package org.dom4j.rule..
Ashkelon: Processing package org.dom4j.rule.pattern..
Ashkelon: Processing package org.dom4j.swing..
Ashkelon: Processing package org.dom4j.tree..
Ashkelon: Processing package org.dom4j.util..
Ashkelon: Processing package org.dom4j.xpath..
Ashkelon: Processing package org.dom4j.xpp..
Ashkelon: Add Time: 7 seconds
Ashkelon: Updating Internal References..
Ashkelon:       Processing FIELD references..
Ashkelon:       Processing METHOD references..
Ashkelon:       Processing IMPL_INTERFACE references..
Ashkelon:       Processing THROWNEXCEPTION references..
Ashkelon:       Processing PARAMETER references..
Ashkelon:       Processing SUPERCLASS references..
Ashkelon:       Processing seetag PACKAGE references..
Ashkelon:       Processing seetag CLASSTYPE references..
Ashkelon:       Processing seetag MEMBER references..
Ashkelon:       Processing seetag EXECMEMBER references..
Ashkelon: Ref. Time: 8 seconds
Ashkelon: done
102 warnings
eitan@ubuntu:~/projects/ashkelon/apis$
</screen>

<para>The warnings are harmless.  They're a side effect of the javadoc parser attempting to resolve referenced libraries from the DOM4J classes.  We see there were a couple of javadoc syntax warnings that we might want to fix.  Otherwise, ashkelon ensured that its source cache was up to date by doing a CVS update.  It then proceeded to process the 14 packages that comprise the dom4j javadocs.  This took seven seconds.  Eight more seconds were spent resolving inter-api references between existing APIs in the database and the newly added one.
</para>

         <para>
            Oftentimes you'll want to update an API you've already populated into your database with 
            an updated version.  You do this with the <command>ashkelon update</command> command.
            This command first deletes the api from the repository, and then proceeds to fetch, 
            parse, and populate the updated version.
         </para>
         
         <para>Say, for example, that dom4j released a new version.  You'd
         update the xml descriptor, maybe the tag name in cvs to fetch the code from.  Then  you'd invoke:
         </para>
         
         <screen>
         ashkelon update dom4j
         </screen>
         
      </sect1>
         
      <sect1>
         <title>Working with J2SE</title>

         <para>
            With J2SE v1.4, javadoc introduced the -source flag for
            processing APIs that used J2SE v1.4 specific features,
            such as the assert keyword.  So, if you're going to
            populate such an API, or J2SE itself, you must specify
            ashkelon's corresponding flag:  --source, like this:
         </para>

         <screen>
   <prompt>$</prompt> <command>ashkelon</command> add --source 1.4 j2sdk14.xml
         </screen>
         
         <para>Another concern is that although it's very convenient to 
         have ashkelon fetch the source code on our behalf directly from
         version control, this is not always possible or practical.  For
         example, you'll more likely manually download J2SE source code
         for processing.  ashkelon has a provision for this.  You can
         define a SOURCEPATH environment variable containing however many 
         paths you need where source code resides that you want to process
         through ashkelon.
         </para>
         
         <para>So, assume you download J2SE to ~/devel/j2se/sources.
         Simply add that path to your SOURCEPATH environment variable
         (in a completely analogous fashion to the way we work with
         CLASSPATH).  Then, simply omit the &lt;repository&gt; section
         from the api descriptor file (it's optional).  ashkelon will
         simply fall back to looking for the j2se source code in your
         source path.
         </para>
         
      </sect1>
      
   </chapter>


   <chapter>
      <title>System Architecture</title>

      <para>
         Here are two complemtentary sources on ashkelon's architecture are:
      </para>

      <variablelist>
         <varlistentry>
            <term>July 2002 java.sun.com main story/article</term>
            <listitem>
               <para>
                  <ulink url="http://java.sun.com/features/2002/07/dbdoc.html">
                     http://java.sun.com/features/2002/07/dbdoc.html</ulink>
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term>JavaOne (2002) alternate presentation (ppt)</term>
            <listitem>
               <para>
                  <ulink url="http://ashkelon.sourceforge.net/files/1145suez.pdf">http://ashkelon.sourceforge.net/files/1145suez.pdf</ulink>
               </para>
            </listitem>
         </varlistentry>
      </variablelist>

   <sect1>
      <title>
         Database Schema Description
      </title>

      <para>
         I have created an entity relationship diagram or sorts (pdf) representing 
         the database schema used by ashkelon.
         Click on the thumbnail for a full-size png:
      </para>

      <para>
         <ulink url="figures/ERD.png">
            <screenshot>
               <screeninfo>ERD</screeninfo>
               <mediaobject>
                  <imageobject>
                     <imagedata fileref="figures/ERD-thumb.png" format="PNG"/>
                  </imageobject>
                  <caption>
                     <para>ERD</para>
                  </caption>
               </mediaobject>
            </screenshot>
         </ulink>
      </para>

      <para>
         The script that constructs the schema for a given database is located in
         <filename>$ASHK_HOME/db/
            <replaceable>$dbtype</replaceable>
            /org/ashkelon/db/ashkelon.sql
         </filename>
      </para>

   </sect1>
   
   </chapter>

   <chapter>
      <title>Viewer Application Screen Shots</title>

      <para>
         Here is a collection of screenshots of the ashkelon web application.  This particular 
         instance shows only a half dozen APIs.  You should be able to notice how the
         search results include items from a variety of APIs.  Again, inter-API cross referencing
         is complete.  For example:  the documentation page for a method in API A that returns a type
         defined in API B will show the return type hyperlinked. 
      </para>

      <table>
         <title>APIs and Package Listings</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/apis.png">
                        <screenshot>
                           <screeninfo>API Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/apis.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>API Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/pkglist.png">
                        <screenshot>
                           <screeninfo>J2SE Package Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/pkglist.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>J2SE Package Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/packages.png">
                        <screenshot>
                           <screeninfo>Packages View</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/packages.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Packages View</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>

      <table>
         <title>Sample Package: java.awt</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/java-awt-brief.png">
                        <screenshot>
                           <screeninfo>java.awt at a glance</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/java-awt-brief.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>java.awt at a glance</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/java-awt-classes.png">
                        <screenshot>
                           <screeninfo>java.awt Class Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/java-awt-classes.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>java.awt Class Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/java-awt-interfaces.png">
                        <screenshot>
                           <screeninfo>java.awt Interfaces Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/java-awt-interfaces.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>java.awt Interfaces Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>

               <row>

                  <entry>
                     <ulink url="figures/screenshots/java-awt-main.png">
                        <screenshot>
                           <screeninfo>java.awt Main View</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/java-awt-main.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>java.awt Main View</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/java-awt-tree.png">
                        <screenshot>
                           <screeninfo>java.awt Inheritance Hierarchy</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/java-awt-tree.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>java.awt Inheritance Hierarchy</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>


      <table>
         <title>Sample Class: java.lang.String</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/string-brief.png">
                        <screenshot>
                           <screeninfo>String class at a glance</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/string-brief.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>String class at a glance</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/string-constructor.png">
                        <screenshot>
                           <screeninfo>String constructor variants</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/string-constructor.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>String constructor variants</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/string-main.png">
                        <screenshot>
                           <screeninfo>String Class Main View</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/string-main.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>String Class Main View</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>

               <row>

                  <entry>
                     <ulink url="figures/screenshots/string-methods.png">
                        <screenshot>
                           <screeninfo>String Method Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/string-methods.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>String Method Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/string-methods-static.png">
                        <screenshot>
                           <screeninfo>String Static Methods Listing</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/string-methods-static.png"
                                            format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>String Static Method Listing</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>


      <table>
         <title>Search</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/search-method-simple.png">
                        <screenshot>
                           <screeninfo>Simple Search</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/search-method-simple.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Simple Search</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/search-results-method-simple.png">
                        <screenshot>
                           <screeninfo>Simple Search Results</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/search-results-method-simple.png"
                                            format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Simple Search Results</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/search-power.png">
                        <screenshot>
                           <screeninfo>Power Search</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/search-power.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Power Search</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>

               <row>

                  <entry>
                     <ulink url="figures/screenshots/search-results-bloch.png">
                        <screenshot>
                           <screeninfo>Power Search Results</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/search-results-bloch.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Power Search Results</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/search-wildcard.png">
                        <screenshot>
                           <screeninfo>Wildcard Search</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/search-wildcard.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Wildcard Search</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>

      <table>
         <title>Method Detail &amp; Cross Reference Lookup</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/session-find-method.png">
                        <screenshot>
                           <screeninfo>Method Detail</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/session-find-method.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Method Detail</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/hbm-session-crossref.png">
                        <screenshot>
                           <screeninfo>Cross Reference Lookup</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/hbm-session-crossref.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Cross Reference Lookup</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>

      <table>
         <title>Stats</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/stats-authors.png">
                        <screenshot>
                           <screeninfo>Author Stats</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/stats-authors.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Author Stats</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>


                  <entry>
                     <ulink url="figures/screenshots/stats-classcount.png">
                        <screenshot>
                           <screeninfo>Package Stats</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/stats-classcount.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Package Stats</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/stats-main.png">
                        <screenshot>
                           <screeninfo>Stats</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/stats-main.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Stats</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

               </row>
            </tbody>
         </tgroup>
      </table>

      <table>
         <title>Miscellaneous</title>
         <tgroup cols="3">
            <tbody>
               <row>

                  <entry>
                     <ulink url="figures/screenshots/author-sample.png">
                        <screenshot>
                           <screeninfo>Author View</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/author-sample.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Author View</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>


                  <entry>
                     <ulink url="figures/screenshots/settings.png">
                        <screenshot>
                           <screeninfo>Settings</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/settings.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Settings</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>

                  <entry>
                     <ulink url="figures/screenshots/legend.png">
                        <screenshot>
                           <screeninfo>Legend</screeninfo>
                           <mediaobject>
                              <imageobject>
                                 <imagedata fileref="figures/screenshots/thumbs/legend.png" format="PNG"/>
                              </imageobject>
                              <caption>
                                 <para>Legend: Color coding and Styles</para>
                              </caption>
                           </mediaobject>
                        </screenshot>
                     </ulink>
                  </entry>


               </row>

            </tbody>
         </tgroup>
      </table>

   </chapter>
   
   <chapter>
      <title>FAQ</title>

      <qandaset defaultlabel="qanda">

         <qandaentry>
            <question>
               <para>Is ashkelon Java 5 Compatible?</para>
            </question>
            <answer>
               <para>You can build and run ashkelon with Java 5.</para>
            </answer>
         </qandaentry>

         <qandaentry>
            <question>
               <para>Does ashkelon support Java 5?</para>
            </question>
            <answer>
               <para>At this time, no.  ashkelon has not been retrofitted to be 
               aware of and document the new Java 5 constructs (enums, generics,
               et al)</para>
            </answer>
         </qandaentry>

         <qandaentry>
            <question>
               <para>Does ashkelon support multiple versions of the same 
               API in a single database?</para>
            </question>
            <answer>
               <para>Not at this time.</para>
            </answer>
         </qandaentry>

         <qandaentry>
            <question>
               <para>Is there an Eclipse Plugin for ashkelon?</para>
            </question>
            <answer>
               <para>No.  We would welcome your contribution of one.  
                  Eitan has written a primitive IDEA plugin for ashkelon
                  though at this time it has not been published.</para>
            </answer>
         </qandaentry>


         <qandaentry>
            <question>
               <para>Does javadoc require source code to produce documentation?</para>
            </question>
            <answer>
               <para>Yes.</para>
            </answer>
         </qandaentry>

      </qandaset>

   </chapter>

   <chapter>
      <title>Credits</title>

      <para>
         Conceived, designed, &amp; built by Eitan Suez, Austin, Texas ( <ulink url="http://u2d.com/">http://u2d.com/</ulink> ).
      </para>

      <para>
         <emphasis>Sincere</emphasis> thanks goes to the following individuals:
      </para>

      <variablelist>
         <varlistentry>
            <term>
               Andreas Schaefer
            </term>
            <listitem>
               <para>
                  For writing the initial ant build file for
                  this project, and for being the first individual
                  to step up to the plate and actively contribute
                  to this project.
               </para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>
               Bob Hays (alephnaught.com)
            </term>
            <listitem>
               <para>
                  For actively helping on the project, contributing
                  a number of patches and features, including an ashkelon
                  ant task
               </para>
            </listitem>
         </varlistentry>

         <varlistentry>
            <term>
               Ben Walding
            </term>
            <listitem>
               <para>
                  Who wrote a maven plugin for ashkelon
                  and who planted the idea in my mind to write a maven
                  POM file for ashkelon (forthcoming)
               </para>
            </listitem>
         </varlistentry>

      </variablelist>

   </chapter>

   <chapter>
      <title>Miscellaneous</title>

      <sect1>
         <title>Project History</title>

         <para>
            I had the idea that javadocs should be a web application relying on a backend database around 1998. It took
            me a couple of years to actually act on this. On a short vacation trip to hawaii in 2000, I wrote my first
            stab at a doclet to populate a db. It worked beautifully. The results were promising but with only a few
            days' work invested in this project, there wasn't much to show for: only a populator doclet.
         </para>

         <para>
            The idea simmered a little longer and a year later I decided that I could no longer sit idle with this idea
            in my head without doing anything about it. So I took a 2-week vacation around March 2001 and shut myself in
            a small hotel room in houston and coded ~ 19 hour days for 14 days straight. The result was 90% of what
            ashkelon is today. This is what I accomplished:
         </para>

         <itemizedlist>
            <listitem>
               <para>developed my own MVC framework to support the web application (a la struts)</para>
            </listitem>
            <listitem>
               <para>redesigned and implemented the database schema from scratch</para>
            </listitem>
            <listitem>
               <para>refactored the javadoc html doclet into jsp pages</para>
            </listitem>
            <listitem>
               <para>learned css</para>
            </listitem>
            <listitem>
               <para>wrote an entirely new gui for javadocs, employing dhtml and css vigorously</para>
            </listitem>
            <listitem>
               <para>wrote the viewer application in jsp</para>
            </listitem>
            <listitem>
               <para>wrote my own crappy database connection pool</para>
            </listitem>
            <listitem>
               <para>Added entirely new sections to the viewer app, going beyond the scope of just javadocs (stats
                  section, authors section)</para>
            </listitem>
         </itemizedlist>

         <para>Over the next three years, I added these:
         </para>

         <itemizedlist>
            <listitem>
               <para>A second GUI, in the style of javadoc (html 3.2)</para>
            </listitem>
            <listitem>
               <para>postgres and mysql support besides the original oracle version</para>
            </listitem>
            <listitem>
               <para>mozilla support for the DHTML GUI</para>
            </listitem>
            <listitem>
               <para>Added a "power search" feature to complement the simple search feature that had originally been
                  built into the viewer app</para>
            </listitem>
         </itemizedlist>

         <para>
            One deduction from this story is that much more can be accomplished in two weeks of immersion compared to
            three years of trying to squeeze in an hour here or there in the middle of the night.</para>

      </sect1>

      <sect1>
         <title>Origin of Project Name</title>

         <para>
            The project name "ashkelon" is definitely influenced by names of other open source projects, especially
            jakarta projects. There are two main reasons for selecting "ashkelon" as the name for this project. One is
            selfish, the other is subtle.
         </para>

         <para>
            I became aware of a Jakarta project called "Alexandria" (now defunct). As I read about Alexandria, I
            realized that my project had many goals similar to Alexandria's: making many api docs available in a single
            place. One cannot find a more aptly named project, as the city of Alexandria was the host of the largest
            known library in antiquity.
         </para>

         <para>It turns out that Ashkelon is also a city, an ancient city, not 250 miles from Alexandria on the
            mediterranean coast of Israel. The thought that two projects so close to each other conceptually were also
            named after two cities close to each other geographically amused me. Furthermore, the Alexandria project was
            hosted on what I considered to be a high profile and high visibilitly open source site: The Apache Jakarta
            project. My project came from relative obscurity (ashkelon likewise is not known for being the source of
            great libraries or documentation projects). I thought to myself.. "maybe a great project can emerge from
            relative obscurity.."
         </para>

         <para>What tipped the scales in favor of naming the project 'ashkelon' is the additional fact that the city of
            Ashkelon was my home for a number of years in my youth.
         </para>

      </sect1>

   </chapter>

</book>
