#
# statements common to all dbs (unless overriden by specific statements file for db)
#

# makeapi

makeapi=select id, name, summarydescription, description, publisher, download_url, release_date, version from API where id=? order by name


# makepackage

makepackage=select p.id, p.name, d.summarydescription, d.description, d.since, d.deprecated, d.id, a.name, p.api_id from PACKAGE p left outer join API a on p.api_id=a.id, DOC d where p.id=? and p.docid=d.id order by p.name


# makeclass

makeclass=select c.id, c.qualifiedname, c.name, c.superclassname, c.version, c.type, c.packageid, s.superclassid, d.description, d.summarydescription, d.since, d.deprecated, d.id, c.modifier, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.containingclassname, cc.id, p.name, API.name, API.id from SUPERCLASS s right outer join CLASSTYPE c on s.classid=c.id left outer join CLASSTYPE cc on cc.qualifiedname=c.containingclassname, DOC d, PACKAGE p, API where c.id=? and c.docid=d.id and c.packageid=p.id and p.api_id=API.id

# classinfo

classinfo=select c.qualifiedname, c.type, c.id, c.superclassname, s.superclassid, d.summarydescription, d.since, d.deprecated, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.modifier from SUPERCLASS s right outer join CLASSTYPE c on s.classid=c.id, DOC d where c.packageid=? and c.containingclassname = '' and c.docid=d.id order by c.type, c.name, isstatic, isabstract

# packageinfo

packageinfo=select p.id, p.name, d.summarydescription from PACKAGE p, DOC d where p.api_id=? and p.docid=d.id order by p.name

#packageinfobyname

packageinfobyname=select p.id, p.name, d.summarydescription from PACKAGE p, DOC d, API a where a.name=? and a.id=p.api_id and p.docid=d.id order by p.name

# getmembers

getmembers=select m.id, m.qualifiedname, m.type, m.isstatic, m.isfinal, m.accessibility, m.modifier, meth.isabstract, meth.returntypeid, meth.returntypename, meth.returntypedimension, em.signature, d.summarydescription, d.since, d.deprecated from METHOD meth right outer join MEMBER m on meth.id=m.id left outer join EXECMEMBER em on em.id=m.id, DOC d where lower(m.name) >= ? and m.docid = d.id order by lower(m.name)

# getclasses

getclasses=select c.id, c.qualifiedname, c.type, c.isstatic, c.isfinal, c.isabstract, c.accessibility, c.modifier, d.summarydescription, d.since, d.deprecated from CLASSTYPE c, DOC d where lower(c.name) >= ? and c.docid = d.id  order by lower(c.name)

# getauthors

getauthors=select id, name from AUTHOR where lower(name) >= ? order by lower(name)
getallauthors=select id, name from AUTHOR order by lower(name)

# getpackages

getpackages=select p.id, p.name, d.summarydescription, d.since, d.deprecated from PACKAGE p, DOC d where lower(p.name) >= ? and p.docid=d.id order by p.name

# getpackages2

getpackages2=select p.id, p.name, d.summarydescription, d.since, d.deprecated from PACKAGE p, DOC d where p.docid=d.id order by p.name

# getapis

getapis=select id, name, summarydescription, publisher, version from API order by name, version desc

# classstats

classstats=select p.name, p.id, count(*) from CLASSTYPE c, PACKAGE p where c.packageid=p.id group by p.name order by p.name

# authorstats

authorstats=select a.name, a.id, count(*) as count from CLASSTYPE c, AUTHOR a, CLASS_AUTHOR ca where c.id=ca.classid and a.id=ca.authorid group by a.name order by count desc

# package count by api

apistatspkg=select count(*), API.name from PACKAGE, API where PACKAGE.api_id = API.id group by api_id order by API.name

# class count by api

apistatscls=select count(*), API.name from CLASSTYPE, API, PACKAGE where CLASSTYPE.packageid=PACKAGE.id and PACKAGE.api_id=API.id group by api_id order by API.name

# member count by api

apistatsmmb=select count(*), API.name from MEMBER, CLASSTYPE, PACKAGE, API where MEMBER.classid=CLASSTYPE.id and CLASSTYPE.packageid=PACKAGE.id and PACKAGE.api_id=API.id group by api_id order by API.name

#

xref_fields=select m.qualifiedname, f.id, f.typename, f.typedimension, d.summarydescription, m.isstatic, m.isfinal, m.accessibility, d.deprecated from FIELD f, MEMBER m, DOC d where f.typeid=? and f.id=m.id and m.docid=d.id order by m.qualifiedname

#

xref_returnedby=select m.qualifiedname, m.id, m.isstatic, m.isfinal, m.accessibility, m.modifier, ex.signature, meth.returntypename, meth.returntypedimension, meth.isabstract, d.summarydescription, d.since, d.deprecated from METHOD meth, EXECMEMBER ex, MEMBER m, DOC d where meth.returntypeid=? and meth.id=ex.id and meth.id=m.id and m.docid=d.id order by m.qualifiedname

#

xref_passedto=select m.qualifiedname, m.id, m.type, ex.signature, d.summarydescription, d.since, d.deprecated, p.typedimension, p.name, m.isstatic, m.isfinal, m.accessibility, m.modifier, meth.isabstract from PARAMETER p, EXECMEMBER ex, MEMBER m, METHOD meth, DOC d where p.typeid=? and p.execmemberid=ex.id and ex.id=m.id and meth.id=m.id and m.docid=d.id order by m.qualifiedname, m.type

#

xref_thrownby=select mem.qualifiedname, mem.id, mem.type, ex.signature, d.summarydescription, te.description, te.name from THROWNEXCEPTION te, EXECMEMBER ex, MEMBER mem, DOC d where te.exceptionid=? and te.throwerid=ex.id and ex.id=mem.id and mem.docid=d.id order by mem.qualifiedname, mem.type

#

xref_extendedby=select c.qualifiedname, c.id, d.summarydescription, c.type from IMPL_INTERFACE ii, CLASSTYPE c, DOC d where ii.interfaceid=? and ii.classid=c.id and c.type!=2 and c.docid=d.id order by c.qualifiedname
xref_implementedby=select c.qualifiedname, c.id, d.summarydescription, c.type from IMPL_INTERFACE ii, CLASSTYPE c, DOC d where ii.interfaceid=? and ii.classid=c.id and c.type=2 and c.docid=d.id order by c.qualifiedname

#

xref_subclass=select c.qualifiedname, c.id, d.summarydescription, c.type from CLASSTYPE c, DOC d where c.superclassname=? and c.type!=2 and c.docid=d.id order by c.qualifiedname

# sequence-related statements

update_seq=UPDATE SEQS SET SEQVAL=? WHERE SEQNAME=?

add_seq=INSERT INTO SEQS (SEQNAME, SEQVAL) VALUES (?, ?)

get_seqs=SELECT * FROM SEQS

# getclassid

getclassid=select id from CLASSTYPE where qualifiedname=?

# getmemberid

getmemberid=select id from MEMBER where qualifiedname=?

# getpkgid

getpkgid=select id from PACKAGE where name=?

# fetch authorclasses

fetch_authorclasses=select c.id, c.qualifiedname from CLSASTYPE c, CLASS_AUTHOR ca where ca.authorid=? order by c.qualifiedname

# fetchauthor

fetchauthor=select a.name, c.id, c.qualifiedname, c.type, a.email from AUTHOR a, CLASSTYPE c, CLASS_AUTHOR ca where a.id=? and ca.authorid=a.id and c.id=ca.classid order by c.qualifiedname

# get class and doc id's

getclsanddocid=select c.id, c.docid from CLASSTYPE c where c.qualifiedname=?

# get field and doc id's

getfieldanddocid=select FIELD.id, MEMBER.docid from FIELD, MEMBER where MEMBER.classid = ? and FIELD.id = MEMBER.id

# get method and doc id's

getmethodanddocid=select METHOD.id, MEMBER.docid from METHOD, MEMBER where MEMBER.classid = ? and METHOD.id = MEMBER.id

# get constructor and doc id's

getconstranddocid=select CONSTRUCTOR.id, MEMBER.docid from CONSTRUCTOR, MEMBER where MEMBER.classid = ? and CONSTRUCTOR.id = MEMBER.id

# deleteclassauthor

deleteclassauthor=delete from CLASS_AUTHOR where classid = ?

# deleteinterfaces

deleteinterfaces=delete from IMPL_INTERFACE where classid = ?

# deletesuperclass

deletesuperclass=delete from SUPERCLASS where classid = ?

# deleteinnercls

deleteinnercls=delete from CLASSTYPE where containingclassname=?

# getdescendents

getdescendents=select a.classid, c.qualifiedname, c.superclassname, c.type, d.summarydescription from CLASS_ANCESTORS a, CLASSTYPE c, DOC d where a.superclassid=? and a.classid=c.id and c.docid=d.id

# membercount (cheap cache dirty checker)
getmembercount=select count(*) from MEMBER

# getsourcepath for a given class
getsourcepath=select a.repository_module, a.repository_srcpath from API a, PACKAGE p, CLASSTYPE c where c.qualifiedname=? and c.packageid=p.id and p.api_id=a.id

# test query: select a.repository_module, a.repository_srcpath from API a, PACKAGE p, CLASSTYPE c where c.qualifiedname='com.u2d.fsm.TransitionsPopupMenu' and c.packageid=p.id and p.api_id=a.id


